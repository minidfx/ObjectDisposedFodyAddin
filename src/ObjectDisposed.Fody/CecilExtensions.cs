namespace ObjectDisposedFodyAddin
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.CompilerServices;

    using Mono.Cecil;

    /// <summary>
    ///     Extensions methods for the following <see cref="Type" />s:
    ///     <list type="bullet">
    ///         <item>
    ///             <term>
    ///                 <see cref="IEnumerable{T}" />
    ///             </term>
    ///         </item>
    ///         <item>
    ///             <term>
    ///                 <see cref="ICustomAttributeProvider" />
    ///             </term>
    ///         </item>
    ///     </list>
    /// </summary>
    public static class CecilExtensions
    {
        /// <summary>
        ///     Determines whether the dispose guard doesn't have to be injected into the method.
        /// </summary>
        /// <param name="customAttributeProvider">
        ///     The <see cref="Type" /> that we want to extend.
        /// </param>
        /// <returns>
        ///     <c>True</c> whether the method contains the attribute <see cref="SkipDisposeGuardAttribute" /> otherwise
        ///     <c>False</c>.
        /// </returns>
        public static bool SkipDisposeGuard(this TypeDefinition customAttributeProvider)
        {
            return customAttributeProvider.CustomAttributes.Any(x => x.AttributeType.FullName == "ObjectDisposedFodyAddin.SkipDisposeGuardAttribute");
        }

        /// <summary>
        ///     Determines whether a type has been generated by a tools.
        /// </summary>
        /// <param name="customAttributeProvider">
        ///     The <see cref="Type" /> that we want to extend.
        /// </param>
        /// <returns>
        ///     <c>True</c> whether the type contains the attribute <see cref="CompilerGeneratedAttribute" /> or
        ///     <see cref="GeneratedCodeAttribute" /> otherwise <c>False</c>.
        /// </returns>
        public static bool IsGeneratedCode(this TypeDefinition customAttributeProvider)
        {
            return customAttributeProvider.CustomAttributes.Any(a => a.AttributeType.Name == "CompilerGeneratedAttribute" || a.AttributeType.Name == "GeneratedCodeAttribute");
        }

        /// <summary>
        ///     Determimes whether the type contains at least a dispose method.
        /// </summary>
        /// <param name="customAttributeProvider">
        ///     The <see cref="Type" /> that we want to extend.
        /// </param>
        /// <returns>
        ///     <c>True</c> whether the type contains at least a dispose method otherwise <c>False</c>.
        /// </returns>
        public static bool HasDisposeMethod(this TypeDefinition customAttributeProvider)
        {
            return customAttributeProvider.HasMethods && customAttributeProvider.Methods.Any(x => x.Name == "Dispose" || x.Name == "DisposeAsync");
        }
    }
}