<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ObjectDisposed.Fody</name>
    </assembly>
    <members>
        <member name="T:ObjectDisposedFodyAddin.CecilExtensions">
            <summary>
                Extensions methods for the following <see cref="T:System.Type"/>s:
                <list type="bullet">
                    <item>
                        <term>
                            <see cref="T:System.Collections.Generic.IEnumerable`1"/>
                        </term>
                    </item>
                    <item>
                        <term>
                            <see cref="T:Mono.Cecil.ICustomAttributeProvider"/>
                        </term>
                    </item>
                </list>
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.SkipDisposeGuard(Mono.Cecil.TypeDefinition)">
            <summary>
                Determines whether the dispose guard doesn't have to be injected into the method.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <returns>
                <c>True</c> whether the method contains the attribute <see cref="T:ObjectDisposedFodyAddin.SkipDisposeGuardAttribute"/> otherwise
                <c>False</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.IsGeneratedCode(Mono.Cecil.TypeDefinition)">
            <summary>
                Determines whether a type has been generated by a tools.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <returns>
                <c>True</c> whether the type contains the attribute <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute"/> or
                <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute"/> otherwise <c>False</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.HasDisposeMethod(Mono.Cecil.TypeDefinition)">
            <summary>
                Determimes whether the type contains at least a dispose method.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <returns>
                <c>True</c> whether the type contains at least a dispose method otherwise <c>False</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.CreateOverrideMethod(Mono.Cecil.TypeDefinition,System.String,Mono.Cecil.TypeReference)">
            <summary>
                Creates an override method into the <paramref name="typeDefinition"/>.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <param name="name">
                The name of the method.
            </param>
            <param name="returnType">
                The return <see cref="T:System.Type"/> of the method.
            </param>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.HasIDisposableInterface(Mono.Cecil.TypeDefinition)">
            <summary>
                Determines whether the <paramref name="typeDefinition"/> implements the interface <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <returns>
                <c>True</c> whether the type implements the interface <see cref="T:System.IDisposable"/> otherwise <c>False</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.HasIAsyncDisposableInterface(Mono.Cecil.TypeDefinition)">
            <summary>
                Determines whether the <paramref name="typeDefinition"/> implements the interface IAsyncDisposable.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <returns>
                <c>True</c> whether the type implements the interface IAsyncDisposable otherwise <c>False</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.GetMethodDefinition(Mono.Cecil.TypeDefinition,System.Predicate{Mono.Cecil.MethodDefinition})">
            <summary>
                Finds recursively the method
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <param name="predicate">
                A function to test an element for a condition.
            </param>
            <returns>
                The <see cref="T:Mono.Cecil.MethodDefinition"/> if the method is found with the <paramref name="predicate"/> otherwise
                <c>null</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.HasDisposeInterface(Mono.Cecil.TypeDefinition)">
            <summary>
                Determines whether the <paramref name="typeDefinition"/> implements the interface <see cref="T:System.IDisposable"/> or
                IAsyncDisposable.
            </summary>
            <param name="typeDefinition">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <returns>
                <c>True</c> whether the type implements the interface <see cref="T:System.IDisposable"/> or IAsyncDisposable otherwise
                <c>False</c>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.InsertBeforeRange(Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,System.Collections.Generic.IEnumerable{Mono.Cecil.Cil.Instruction})">
            <summary>
                Inserts <paramref name="instructions"/> before the <paramref name="beforeInstruction"/>.
            </summary>
            <param name="ilProcessor">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <param name="beforeInstruction">
                Inserts <paramref name="instructions"/> before this one.
            </param>
            <param name="instructions">
                <see cref="T:ObjectDisposedFodyAddin.Instructions"/> that will be inserted.
            </param>
        </member>
        <member name="M:ObjectDisposedFodyAddin.CecilExtensions.AppendRange(Mono.Cecil.Cil.ILProcessor,System.Collections.Generic.IEnumerable{Mono.Cecil.Cil.Instruction})">
            <summary>
                Inserts <paramref name="instructions"/> at the start of the method.
            </summary>
            <param name="ilProcessor">
                The <see cref="T:System.Type"/> that we want to extend.
            </param>
            <param name="instructions">
                <see cref="T:ObjectDisposedFodyAddin.Instructions"/> that will be inserted at the start of the method.
            </param>
        </member>
        <member name="T:ObjectDisposedFodyAddin.Instructions">
            <summary>
                Contains instructions for injection purposes into any dispose methods.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.Instructions.GetSetIsDisposedInstructions(Mono.Cecil.Cil.ILProcessor,Mono.Cecil.FieldReference)">
            <summary>
                Returns instruction for injecting the isDisposed field into a type.
            </summary>
            <param name="ilProcessor">
                Service for managing instructions of a method.
            </param>
            <param name="disposeFieldDefinition">
                The isDisposed field.
            </param>
            <returns>
                A collection of <see cref="T:Mono.Cecil.Cil.Instruction"/>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.Instructions.GetGuardInstructions(Mono.Cecil.Cil.ILProcessor,Mono.Cecil.MemberReference,Mono.Cecil.FieldReference,Mono.Cecil.MethodReference)">
            <summary>
                Returns instructions for injecting the guard into a method.
            </summary>
            <param name="ilProcessor">
                Service for managing instructions of a method.
            </param>
            <param name="memberReference">
                The reference of the member, which contains the method.
            </param>
            <param name="disposeFieldDefinition">
                The isDisposed field.
            </param>
            <param name="objectDisposedExceptionReference">
                The constructor reference of the class <see cref="T:System.ObjectDisposedException"/>.
            </param>
            <returns>
                A collection of <see cref="T:Mono.Cecil.Cil.Instruction"/>.
            </returns>
        </member>
        <member name="M:ObjectDisposedFodyAddin.Instructions.GetDefaultOverrideMethodInstructions(Mono.Cecil.Cil.ILProcessor,Mono.Cecil.TypeDefinition,Mono.Cecil.MethodDefinition)">
            <summary>
                Returns instructions for calling the base method.
            </summary>
            <param name="ilProcessor">
                Service for managing instructions of a method.
            </param>
            <param name="typeDefinition">
                The definition type containing the new dispose method.
            </param>
            <param name="newDisposeMethodDefinition">
                The definition method in which we will inject instructions.
            </param>
            <returns>
                A collection of <see cref="T:Mono.Cecil.Cil.Instruction"/>.
            </returns>
        </member>
        <member name="T:ObjectDisposedFodyAddin.ModuleWeaver">
            <summary>
                The module containing the logic for injecting instructions to check whether an object is already disposed.
            </summary>
        </member>
        <member name="F:ObjectDisposedFodyAddin.ModuleWeaver.objectDisposedExceptionReference">
            <summary>
                The constructor reference with string as argument of the <see cref="T:System.ObjectDisposedException"/> class.
            </summary>
        </member>
        <member name="F:ObjectDisposedFodyAddin.ModuleWeaver.types">
            <summary>
                Filtered <see cref="T:System.Type"/>s found in the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:ObjectDisposedFodyAddin.ModuleWeaver.typeSystem">
            <summary>
                System <see cref="T:System.Type"/>s loaded from the mscorlib.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.ModuleWeaver.#ctor">
            <summary>
                Initialize an instance of <see cref="T:ObjectDisposedFodyAddin.ModuleWeaver"/> class.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.ModuleWeaver.Execute">
            <summary>
                Will be executed at the end of the compile time.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.ModuleWeaver.CreateDisposeMethodIfNotExists">
            <summary>
                Creates the disposable method for any types that inherit another type that implements a disposable interface
                for injecting the instructions to set isDisposed to true when it is called.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.ModuleWeaver.Cancel">
            <summary>
                Will be called when a request to cancel the build occurs.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.ModuleWeaver.AfterWeaving">
            <summary>
                Will be called after all weaving has occurred and the module has been saved.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.ModuleWeaver.LogDebug">
            <summary>
                Logger for notifying MSBuild about a debug message.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.ModuleWeaver.LogInfo">
            <summary>
                Logger for notifying MSBuild about an important message.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.ModuleWeaver.LogWarning">
            <summary>
                Logger for notifying MSBuild about a warning message.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.ModuleWeaver.AssemblyResolver">
            <summary>
                An instance of <see cref="T:Mono.Cecil.IAssemblyResolver"/> for resolving assembly references.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.ModuleWeaver.AssemblyFilePath">
            <summary>
                Contain the full path of the target assembly.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.ModuleWeaver.ModuleDefinition">
            <summary>
                An instance of Mono.Cecil.ModuleDefinition for processing.
            </summary>
        </member>
        <member name="T:ObjectDisposedFodyAddin.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ObjectDisposedFodyAddin.Properties.Resources._1426897298_erase_128">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:ObjectDisposedFodyAddin.WeavingException">
            <summary>
                Thrown when an error occured while the injected in the <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:ObjectDisposedFodyAddin.WeavingException.#ctor(System.String,ObjectDisposedFodyAddin.WeavingErrorCodes)">
            <summary>
                Initializes a new instance of the <see cref="T:ObjectDisposedFodyAddin.WeavingException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">The error code of the <see cref="T:ObjectDisposedFodyAddin.WeavingException"/>.</param>
        </member>
        <member name="P:ObjectDisposedFodyAddin.WeavingException.ErrorCode">
            <summary>
                Returns the error code of the <see cref="T:ObjectDisposedFodyAddin.WeavingException"/>.
            </summary>
        </member>
    </members>
</doc>
